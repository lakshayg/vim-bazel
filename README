# vim-bazel

This plugin allows invoking bazel from vim

# Commands

:Bazel {command} [targets...]

This is identical to calling :!bazel {command} [arguments...] except
when the command is "build" or "test", in which case, it provides some
niceties

* Errors from the compiler are loaded into the quickfix list
* Test failure logs are loaded into the quickfix list
* Parses errors due to missing dependencies in bazel target definitions
* If no targets are specified, it calls bazel for the current file
* If the current file is a BUILD file, calls the command for all the
  targets in the BUILD file

Note: It is currently tuned for C++ development in the sense that the
errorformat is set to recognize error messages from gcc/clang

# Command completion

To enable completion of targets in bazel commands, vim-bazel tries to
determine the location of the bazel bash completion script. If target
completion does not work, set g:bazel_bash_completion_path to the path
of the bazel bash completion script on your system. To locate the script
on your system see: https://docs.bazel.build/versions/master/completion.html

let g:bazel_bash_completion_path = "/usr/local/etc/bash_completion.d/bazel-complete.bash"

# Asynchronous build

vim-bazel can use [tpope/vim-dispatch][1] to run builds asynchronously. If
vim-dispatch is installed, it will be used to launch builds in a separate tmux
pane, in a vim terminal, or in some other way depending on your platform. This
can be disabled by setting:

```
let g:bazel_enable_async_dispatch = 0
```

# Missing Features

* Unit tests
* Support for languages besides C++

[1]: https://github.com/tpope/vim-dispatch
